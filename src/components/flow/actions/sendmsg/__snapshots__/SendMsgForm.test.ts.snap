// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SendMsgForm render should render 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="send_msg"
  tabs={
    Array [
      Object {
        "body": <CheckboxElement
          checked={false}
          description="Send a message to all destinations known for this contact. If you aren't sure what this means, leave it unchecked."
          name="All Destinations"
          onChange={[Function]}
          title="All Destinations"
        />,
        "checked": false,
        "name": "Advanced",
      },
      Object {
        "body": <React.Fragment>
          <p>
            Add an attachment to each message. The attachment can be a file you upload or a dynamic URL using expressions and variables from your Flow.
          </p>
          <React.Fragment>
            <div
              className="url_attachment"
            >
              <div
                className="type_choice"
              >
                <SelectElement
                  entry={
                    Object {
                      "value": null,
                    }
                  }
                  name="Type Options"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "name": "Image URL",
                        "value": "image",
                      },
                      Object {
                        "name": "Audio URL",
                        "value": "audio",
                      },
                      Object {
                        "name": "Video URL",
                        "value": "video",
                      },
                      Object {
                        "name": "Sticker URL",
                        "value": "sticker",
                      },
                      Object {
                        "name": "PDF Document URL",
                        "value": "document",
                      },
                      Object {
                        "name": "Expression",
                        "value": "expression",
                      },
                    ]
                  }
                  placeholder="Add Attachment"
                  style="small"
                />
              </div>
            </div>
            <div />
          </React.Fragment>
          <input
            onChange={[Function]}
            style={
              Object {
                "display": "none",
              }
            }
            type="file"
          />
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "Attachments",
      },
      Object {
        "body": <React.Fragment>
          <p>
            Quick Replies are made into buttons for supported channels. For example, when asking a question, you might add a Quick Reply for "Yes" and one for "No".
          </p>
          <MultiChoiceInput
            entry={
              Object {
                "value": "",
              }
            }
            helpText={
              <Trans
                i18nKey="forms.add_quick_reply"
              >
                Add a new Quick Reply and press enter.
              </Trans>
            }
            items={
              Object {
                "value": Array [],
              }
            }
            name="Quick Reply"
            onChange={[Function]}
          />
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "Quick Replies",
      },
      Object {
        "body": <React.Fragment>
          <p>
            Sending messages over a WhatsApp channel requires that a template be used if you have not received a message from a contact in the last 24 hours. Setting a template to use over WhatsApp is especially important for the first message in your flow.
          </p>
          <AssetSelector
            entry={
              Object {
                "value": null,
              }
            }
            formClearable={true}
            name="template"
            noOptionsMessage="No templates found"
            onChange={[Function]}
            searchable={true}
            shouldExclude={[Function]}
          />
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "WhatsApp",
      },
    ]
  }
  title="Send Message"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "component": [Function],
        "description": "Send the contact a message",
        "form": [Function],
        "localization": [Function],
        "localizeableKeys": Array [
          "text",
          "quick_replies",
          "templating.variables",
          "attachments",
        ],
        "massageForDisplay": [Function],
        "name": "Send Message",
        "type": "send_msg",
      }
    }
    onChange={[MockFunction]}
  />
  <TextInputElement
    autocomplete={true}
    counter=".sms-counter"
    entry={
      Object {
        "value": "Hey!",
      }
    }
    focus={true}
    name="Message"
    onChange={[Function]}
    showLabel={false}
    textarea={true}
  />
  <temba-charcount
    class="sms-counter"
  />
  <div
    className="label_container"
  >
    <p>
      Select the labels to apply to the outgoing message.
    </p>
    <AssetSelector
      assets={
        Object {
          "items": Object {},
          "type": "label",
        }
      }
      createAssetFromInput={[Function]}
      createPrefix="Create Label: "
      entry={
        Object {
          "value": Array [],
        }
      }
      expressions={true}
      multi={true}
      name="Labels"
      onAssetCreated={[Function]}
      onChange={[Function]}
      placeholder="Enter the name of an existing label or create a new one"
      searchable={true}
    />
  </div>
</Dialog>
`;

exports[`SendMsgForm updates should allow switching from router 1`] = `
Array [
  Object {
    "all_urns": false,
    "attachments": Array [],
    "labels": Array [],
    "quick_replies": Array [],
    "text": "What is your favorite color?",
    "type": "send_msg",
    "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
  },
]
`;

exports[`SendMsgForm updates should save changes 1`] = `
Object {
  "attachments": Array [],
  "expression": null,
  "labels": Object {
    "value": Array [],
  },
  "message": Object {
    "validationFailures": Array [],
    "value": "What is your favorite color?",
  },
  "quickReplies": Object {
    "validationFailures": Array [],
    "value": Array [
      "red",
      "green",
      "blue",
    ],
  },
  "quickReplyEntry": Object {
    "value": "",
  },
  "sendAll": true,
  "template": Object {
    "value": null,
  },
  "templateVariables": Array [],
  "topic": Object {
    "value": undefined,
  },
  "uploadError": "",
  "uploadInProgress": false,
  "valid": true,
}
`;

exports[`SendMsgForm updates should save changes 2`] = `
Array [
  Object {
    "all_urns": true,
    "attachments": Array [],
    "labels": Array [],
    "quick_replies": Array [
      "red",
      "green",
      "blue",
    ],
    "text": "What is your favorite color?",
    "type": "send_msg",
    "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
  },
]
`;
