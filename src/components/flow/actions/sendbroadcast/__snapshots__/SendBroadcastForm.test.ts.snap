// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SendBroadcastForm render should render an empty form with no action 1`] = `
Object {
  "attachmentError": "",
  "attachments": Array [],
  "message": Object {
    "value": "",
  },
  "recipients": Object {
    "value": Array [],
  },
  "template": Object {
    "value": null,
  },
  "templateVariables": Array [],
  "valid": false,
  "validAttachment": false,
}
`;

exports[`SendBroadcastForm render should render an empty form with no action 2`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="send_broadcast"
  tabs={
    Array [
      Object {
        "body": <React.Fragment>
          <p>
            Sending messages over a WhatsApp channel requires that a template be used if you have not received a message from a contact in the last 24 hours. Setting a template to use over WhatsApp is especially important for the first message in your flow.
          </p>
          <AssetSelector
            entry={
              Object {
                "value": null,
              }
            }
            formClearable={true}
            name="template"
            noOptionsMessage="No templates found"
            onChange={[Function]}
            searchable={true}
            shouldExclude={[Function]}
          />
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "WhatsApp",
      },
      Object {
        "body": <React.Fragment>
          <p>
            Add an attachment to each message. The attachment can be a file you upload or a dynamic URL using expressions and variables from your Flow.
          </p>
          <React.Fragment>
            <div
              className="url_attachment"
            >
              <div
                className="type_choice"
              >
                <SelectElement
                  entry={
                    Object {
                      "value": null,
                    }
                  }
                  name="Type Options"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "name": "Image URL",
                        "value": "image",
                      },
                      Object {
                        "name": "Audio URL",
                        "value": "audio",
                      },
                      Object {
                        "name": "Video URL",
                        "value": "video",
                      },
                      Object {
                        "name": "Sticker URL",
                        "value": "sticker",
                      },
                      Object {
                        "name": "PDF Document URL",
                        "value": "document",
                      },
                    ]
                  }
                  placeholder="Add Attachment"
                  style="small"
                />
              </div>
            </div>
          </React.Fragment>
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "Attachments",
      },
    ]
  }
  title="Send Broadcast"
>
  <TypeList
    __className=""
    customTitle="Step 1: When a contact arrives at this point in your flow..."
    initialType={
      Object {
        "component": [Function],
        "description": "Send a staff member a message",
        "form": [Function],
        "localization": [Function],
        "localizeableKeys": Array [
          "text",
        ],
        "name": "Send Broadcast",
        "type": "send_broadcast",
      }
    }
    onChange={[MockFunction]}
  />
  <AssetSelector
    assets={
      Object {
        "items": Object {},
        "type": "contact",
      }
    }
    entry={
      Object {
        "value": Array [],
      }
    }
    expressions={true}
    multi={true}
    name="Recipients"
    onChange={[Function]}
    placeholder="Select Contacts"
    searchable={true}
  />
  <p />
  <p>
    Step 2: Select a template on the WhatsApp tab
  </p>
</Dialog>
`;

exports[`SendBroadcastForm render should render self, children with base props 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  headerClass="send_broadcast"
  tabs={
    Array [
      Object {
        "body": <React.Fragment>
          <p>
            Sending messages over a WhatsApp channel requires that a template be used if you have not received a message from a contact in the last 24 hours. Setting a template to use over WhatsApp is especially important for the first message in your flow.
          </p>
          <AssetSelector
            entry={
              Object {
                "value": null,
              }
            }
            formClearable={true}
            name="template"
            noOptionsMessage="No templates found"
            onChange={[Function]}
            searchable={true}
            shouldExclude={[Function]}
          />
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "WhatsApp",
      },
      Object {
        "body": <React.Fragment>
          <p>
            Add an attachment to each message. The attachment can be a file you upload or a dynamic URL using expressions and variables from your Flow.
          </p>
          <React.Fragment>
            <div
              className="url_attachment"
            >
              <div
                className="type_choice"
              >
                <SelectElement
                  entry={
                    Object {
                      "value": null,
                    }
                  }
                  name="Type Options"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "name": "Image URL",
                        "value": "image",
                      },
                      Object {
                        "name": "Audio URL",
                        "value": "audio",
                      },
                      Object {
                        "name": "Video URL",
                        "value": "video",
                      },
                      Object {
                        "name": "Sticker URL",
                        "value": "sticker",
                      },
                      Object {
                        "name": "PDF Document URL",
                        "value": "document",
                      },
                    ]
                  }
                  placeholder="Add Attachment"
                  style="small"
                />
              </div>
            </div>
          </React.Fragment>
        </React.Fragment>,
        "checked": false,
        "hasErrors": false,
        "name": "Attachments",
      },
    ]
  }
  title="Send Broadcast"
>
  <TypeList
    __className=""
    customTitle="Step 1: When a contact arrives at this point in your flow..."
    initialType={
      Object {
        "component": [Function],
        "description": "Send a staff member a message",
        "form": [Function],
        "localization": [Function],
        "localizeableKeys": Array [
          "text",
        ],
        "name": "Send Broadcast",
        "type": "send_broadcast",
      }
    }
    onChange={[MockFunction]}
  />
  <AssetSelector
    assets={
      Object {
        "items": Object {},
        "type": "contact",
      }
    }
    entry={
      Object {
        "value": Array [
          Object {
            "id": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
            "name": "Cat Fanciers",
            "type": "group",
          },
          Object {
            "id": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
            "name": "Cat Facts",
            "type": "group",
          },
          Object {
            "id": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
            "missing": false,
            "name": "Kellan Alexander",
            "type": "contact",
          },
          Object {
            "id": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "missing": false,
            "name": "Norbert Kwizera",
            "type": "contact",
          },
          Object {
            "id": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
            "missing": false,
            "name": "Rowan Seymour",
            "type": "contact",
          },
        ],
      }
    }
    expressions={true}
    multi={true}
    name="Recipients"
    onChange={[Function]}
    placeholder="Select Contacts"
    searchable={true}
  />
  <p />
  <p>
    Step 2: Select a template on the WhatsApp tab
  </p>
</Dialog>
`;

exports[`SendBroadcastForm updates handles recipent change 1`] = `
Object {
  "attachmentError": "",
  "attachments": Array [],
  "message": Object {
    "value": "Hello World",
  },
  "recipients": Object {
    "validationFailures": Array [],
    "value": Array [
      Object {
        "id": "group-0",
        "name": "My Group",
      },
    ],
  },
  "template": Object {
    "value": null,
  },
  "templateVariables": Array [],
  "valid": true,
  "validAttachment": false,
}
`;

exports[`SendBroadcastForm updates handles text change 1`] = `
Object {
  "attachmentError": "",
  "attachments": Array [],
  "message": Object {
    "value": "Hello World",
  },
  "recipients": Object {
    "value": Array [
      Object {
        "id": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
        "name": "Cat Fanciers",
        "type": "group",
      },
      Object {
        "id": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
        "name": "Cat Facts",
        "type": "group",
      },
      Object {
        "id": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
        "missing": false,
        "name": "Kellan Alexander",
        "type": "contact",
      },
      Object {
        "id": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
        "missing": false,
        "name": "Norbert Kwizera",
        "type": "contact",
      },
      Object {
        "id": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
        "missing": false,
        "name": "Rowan Seymour",
        "type": "contact",
      },
    ],
  },
  "template": Object {
    "value": null,
  },
  "templateVariables": Array [],
  "valid": true,
  "validAttachment": false,
}
`;

exports[`SendBroadcastForm updates should allow switching from router 1`] = `undefined`;
